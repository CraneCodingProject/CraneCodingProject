[{"exerciseName":"TEN_BAI_0",
"exerciseId":"IDBAI_0",
"exerciseNumber":"<dl> <dt><code>initialization</code></dt> <dd>An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the <code>var</code>keyword. These variables are not local to the loop, i.e. they are in the same scope the <code>for</code>loop is in. The result of this expression is discarded.</dd> <dt><code>condition</code></dt> <dd>An expression to be evaluated before each loop iteration. If this expression evaluates to true,<code>statement</code> is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the <code>for</code> construct.</dd> <dt><code>final-expression</code></dt> <dd>An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of <code>condition</code>. Generally used to update or increment the counter variable.</dd> <dt><code>statement</code></dt> <dd>A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a <a title=‘JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/block’>block</a> statement (<code>{ ... }</code>) to group those statements. To execute no statement within the loop, use an <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement (<code>;</code>).</dd> </dl> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_for’>Using <code>for</code></h3> <p>The following <code>for</code> statement starts by declaring the variable <code>i</code> and initializing it to <code>0</code>. It checks that <code>i</code> is less than nine, performs the two succeeding statements, and increments <code>i</code> by 1 after each pass through the loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Optional_for_expressions’>Optional <code>for</code> expressions</h3> <p>All three expressions in the head of the <code>for</code> loop are optional.</p> <p>For example, in the <em>initialization</em> block it is not required to initialize variables:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>Like the <em>initialization</em> block, the <em>condition</em> block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>You can also omit all three blocks. Again, make sure to use a <code><a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break’>break</a></code> statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre> "
},
{
    "exerciseName":"TEN_BAI_1",
    "exerciseId":"IDBAI_1",
    "exerciseNumber": "<!-- ####### YAY, I AM THE SOURCE EDITOR! #########--> <p>The <strong>for statement</strong> creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement or a set of statements executed in the loop.</p> <h2 id=‘Syntax’>Syntax</h2> <pre class=‘syntaxbox’>for ([<em>initialization</em>]; [<em>condition</em>]; [<em>final-expression</em>]) <em>statement</em> </pre> <dl> <dt><code>initialization</code></dt> <dd>An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the<code>var</code> keyword. These variables are not local to the loop, i.e. they are in the same scope the<code>for</code> loop is in. The result of this expression is discarded.</dd> <dt><code>condition</code></dt> <dd>An expression to be evaluated before each loop iteration. If this expression evaluates to true,<code>statement</code> is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the <code>for</code> construct.</dd> <dt><code>final-expression</code></dt> <dd>An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of <code>condition</code>. Generally used to update or increment the counter variable.</dd> <dt><code>statement</code></dt> <dd>A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a <a title=‘JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/block’>block</a> statement (<code>{ ... }</code>) to group those statements. To execute no statement within the loop, use an <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement (<code>;</code>).</dd> </dl> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_for’>Using <code>for</code></h3> <p>The following <code>for</code> statement starts by declaring the variable <code>i</code> and initializing it to <code>0</code>. It checks that <code>i</code> is less than nine, performs the two succeeding statements, and increments <code>i</code> by 1 after each pass through the loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Optional_for_expressions’>Optional <code>for</code> expressions</h3> <p>All three expressions in the head of the <code>for</code> loop are optional.</p> <p>For example, in the <em>initialization</em> block it is not required to initialize variables:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>Like the <em>initialization</em> block, the <em>condition</em> block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>You can also omit all three blocks. Again, make sure to use a <code><a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break’>break</a></code> statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre>"},
{
"exerciseName":"TEN_BAI_2",
"exerciseId":"IDBAI_2",
"exerciseNumber":"<!-- ####### YAY, I AM THE SOURCE EDITOR! #########--> <p>The <strong>if statement</strong> executes a statement if a specified condition is true. If the condition is false, another statement can be executed.</p> <h2 id=‘Syntax’>Syntax</h2> <pre class=‘syntaxbox’>if (<em>condition</em>) <em>statement1</em> [else <em>statement2</em>] </pre> <dl> <dt><code>condition</code></dt> <dd>An <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions’>expression</a> that evaluates to true or false.</dd> </dl> <dl> <dt><code>statement1</code></dt> <dd>Statement that is executed if <code>condition</code> evaluates to true. Can be any statement, including further nested <code>if</code> statements. To execute multiple statements, use a <a title=‘en/JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block’>block</a>statement ({ ... }) to group those statements, to execute no statements, use an<a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement.</dd> </dl> <dl> <dt><code>statement2</code></dt> <dd>Statement that is executed if <code>condition</code> evaluates to false and the <code>else</code> clause exists. Can be any statement, including block statements and further nested <code>if</code>statements.</dd> </dl> <h2 id=‘Description’>Description</h2> <p>Multiple <code>if...else</code> statements can be nested to create an <code>else if</code> clause. Note that there is no <code>elseif</code> (in one word) keyword in JavaScript.</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition1) statement1 else if (condition2) statement2 else if (condition3) statement3 ... else statementN</code></pre> <p>To see how this works, this is how it would look like if the nesting were properly indented:</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition1) statement1 else if (condition2) statement2 else if (condition3) ...</code></pre> <p>To execute multiple statements within a clause, use a block statement (<code>{ ... }</code>) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested <code>if</code> statements:</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition) { statements1 } else { statements2 }</code></pre> <p>Do not confuse the primitive boolean values <code>true</code> and <code>false</code> with the true and false values of the <a title=‘en/JavaScript/Reference/Global_Objects/Boolean’ href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean’>Boolean</a> object. Any value that is not <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code>, or the empty string (<code>‘‘</code>), and any object, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> b <span class=‘token operator’>=</span> <span class=‘token keyword’>new</span> <span class=‘token class-name’>Boolean</span><span class=‘token punctuation’>(</span><span class=‘token keyword’>false</span><span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>b<span class=‘token punctuation’>)</span> <span class=‘token comment’ spellcheck=‘true’>// this condition evaluates to true</span></code></pre> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_if...else’>Using <code>if...else</code></h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>cipher_char <span class=‘token operator’>===</span> from_char<span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> result <span class=‘token operator’>=</span> result <span class=‘token operator’>+</span> to_char<span class=‘token punctuation’>;</span> x<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token punctuation’>{</span> result <span class=‘token operator’>=</span> result <span class=‘token operator’>+</span> clear_char<span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Using_else_if’>Using <code>else if</code></h3> <p>Note that there is no <code>elseif</code> syntax in JavaScript. However, you can write it with a space between <code>else</code> and <code>if</code>:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>></span> <span class=‘token number’>5</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>></span> <span class=‘token number’>50</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Assignment_within_the_conditional_expression’>Assignment within the conditional expression</h3> <p>It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>=</span> y<span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token comment’ spellcheck=‘true’>/* do the right thing */</span> <span class=‘token punctuation’>}</span></code></pre> <p>If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>(</span>x <span class=‘token operator’>=</span> y<span class=‘token punctuation’>)</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token comment’ spellcheck=‘true’>/* do the right thing */</span> <span class=‘token punctuation’>}</span></code></pre>"},
{
    "exerciseName":"TEN_BAI_3",
    "exerciseId":"IDBAI_3",
    "exerciseNumber":"NOI_DUNG_BAI_3"
},
{
"exerciseName":"TEN_BAI_4",
"exerciseId":"IDBAI_4",
"exerciseNumber":"NOI_DUNG_BAI_4"
},
{
    "exerciseName":"TEN_BAI_5",
    "exerciseId":"IDBAI_5",
    "exerciseNumber":"NOI_DUNG_BAI_5"
},
{
"exerciseName":"TEN_BAI_6",
"exerciseId":"IDBAI_6",
"exerciseNumber":"NOI_DUNG_BAI_6"
},
{
    "exerciseName":"TEN_BAI_7",
    "exerciseId":"IDBAI_7",
    "exerciseNumber":"NOI_DUNG_BAI_7"
},
{
"exerciseName":"TEN_BAI_8",
"exerciseId":"IDBAI_8",
"exerciseNumber":"NOI_DUNG_BAI_8"
},
{
    "exerciseName":"TEN_BAI_9",
    "exerciseId":"IDBAI_9",
    "exerciseNumber":"NOI_DUNG_BAI_9"
},
{
"exerciseName":"TEN_BAI_10",
"exerciseId":"IDBAI_10",
"exerciseNumber":"NOI_DUNG_BAI_10"
},
{
    "exerciseName":"TEN_BAI_11",
    "exerciseId":"IDBAI_11",
    "exerciseNumber":"NOI_DUNG_BAI_11"
},
{
"exerciseName":"TEN_BAI_12",
"exerciseId":"IDBAI_12",
"exerciseNumber":"NOI_DUNG_BAI_12"
},
{
    "exerciseName":"TEN_BAI_13",
    "exerciseId":"IDBAI_13",
    "exerciseNumber":"NOI_DUNG_BAI_13"
},
{
"exerciseName":"TEN_BAI_14",
"exerciseId":"IDBAI_14",
"exerciseNumber":"NOI_DUNG_BAI_14"
}
]