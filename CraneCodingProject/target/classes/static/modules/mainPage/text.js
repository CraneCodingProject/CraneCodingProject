[
{
    "exerciseName":"Looping",
    "exerciseId":"IDBAI_1",
    "exerciseNumber": "<!-- ####### YAY, I AM THE SOURCE EDITOR! #########--> <p>The <strong>for statement</strong> creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement or a set of statements executed in the loop.</p> <h2 id=‘Syntax’>Syntax</h2> <pre class=‘syntaxbox’>for ([<em>initialization</em>]; [<em>condition</em>]; [<em>final-expression</em>]) <em>statement</em> </pre> <dl> <dt><code>initialization</code></dt> <dd>An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the<code>var</code> keyword. These variables are not local to the loop, i.e. they are in the same scope the<code>for</code> loop is in. The result of this expression is discarded.</dd> <dt><code>condition</code></dt> <dd>An expression to be evaluated before each loop iteration. If this expression evaluates to true,<code>statement</code> is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the <code>for</code> construct.</dd> <dt><code>final-expression</code></dt> <dd>An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of <code>condition</code>. Generally used to update or increment the counter variable.</dd> <dt><code>statement</code></dt> <dd>A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a <a title=‘JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/block’>block</a> statement (<code>{ ... }</code>) to group those statements. To execute no statement within the loop, use an <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement (<code>;</code>).</dd> </dl> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_for’>Using <code>for</code></h3> <p>The following <code>for</code> statement starts by declaring the variable <code>i</code> and initializing it to <code>0</code>. It checks that <code>i</code> is less than nine, performs the two succeeding statements, and increments <code>i</code> by 1 after each pass through the loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Optional_for_expressions’>Optional <code>for</code> expressions</h3> <p>All three expressions in the head of the <code>for</code> loop are optional.</p> <p>For example, in the <em>initialization</em> block it is not required to initialize variables:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>Like the <em>initialization</em> block, the <em>condition</em> block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>You can also omit all three blocks. Again, make sure to use a <code><a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break’>break</a></code> statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre>"},
{
"exerciseName":"If - Else",
"exerciseId":"IDBAI_2",
"exerciseNumber":"<!-- ####### YAY, I AM THE SOURCE EDITOR! #########--> <p>The <strong>if statement</strong> executes a statement if a specified condition is true. If the condition is false, another statement can be executed.</p> <h2 id=‘Syntax’>Syntax</h2> <pre class=‘syntaxbox’>if (<em>condition</em>) <em>statement1</em> [else <em>statement2</em>] </pre> <dl> <dt><code>condition</code></dt> <dd>An <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions’>expression</a> that evaluates to true or false.</dd> </dl> <dl> <dt><code>statement1</code></dt> <dd>Statement that is executed if <code>condition</code> evaluates to true. Can be any statement, including further nested <code>if</code> statements. To execute multiple statements, use a <a title=‘en/JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block’>block</a>statement ({ ... }) to group those statements, to execute no statements, use an<a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement.</dd> </dl> <dl> <dt><code>statement2</code></dt> <dd>Statement that is executed if <code>condition</code> evaluates to false and the <code>else</code> clause exists. Can be any statement, including block statements and further nested <code>if</code>statements.</dd> </dl> <h2 id=‘Description’>Description</h2> <p>Multiple <code>if...else</code> statements can be nested to create an <code>else if</code> clause. Note that there is no <code>elseif</code> (in one word) keyword in JavaScript.</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition1) statement1 else if (condition2) statement2 else if (condition3) statement3 ... else statementN</code></pre> <p>To see how this works, this is how it would look like if the nesting were properly indented:</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition1) statement1 else if (condition2) statement2 else if (condition3) ...</code></pre> <p>To execute multiple statements within a clause, use a block statement (<code>{ ... }</code>) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested <code>if</code> statements:</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition) { statements1 } else { statements2 }</code></pre> <p>Do not confuse the primitive boolean values <code>true</code> and <code>false</code> with the true and false values of the <a title=‘en/JavaScript/Reference/Global_Objects/Boolean’ href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean’>Boolean</a> object. Any value that is not <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code>, or the empty string (<code>‘‘</code>), and any object, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> b <span class=‘token operator’>=</span> <span class=‘token keyword’>new</span> <span class=‘token class-name’>Boolean</span><span class=‘token punctuation’>(</span><span class=‘token keyword’>false</span><span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>b<span class=‘token punctuation’>)</span> <span class=‘token comment’ spellcheck=‘true’>// this condition evaluates to true</span></code></pre> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_if...else’>Using <code>if...else</code></h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>cipher_char <span class=‘token operator’>===</span> from_char<span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> result <span class=‘token operator’>=</span> result <span class=‘token operator’>+</span> to_char<span class=‘token punctuation’>;</span> x<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token punctuation’>{</span> result <span class=‘token operator’>=</span> result <span class=‘token operator’>+</span> clear_char<span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Using_else_if’>Using <code>else if</code></h3> <p>Note that there is no <code>elseif</code> syntax in JavaScript. However, you can write it with a space between <code>else</code> and <code>if</code>:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>></span> <span class=‘token number’>5</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>></span> <span class=‘token number’>50</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Assignment_within_the_conditional_expression’>Assignment within the conditional expression</h3> <p>It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>=</span> y<span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token comment’ spellcheck=‘true’>/* do the right thing */</span> <span class=‘token punctuation’>}</span></code></pre> <p>If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>(</span>x <span class=‘token operator’>=</span> y<span class=‘token punctuation’>)</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token comment’ spellcheck=‘true’>/* do the right thing */</span> <span class=‘token punctuation’>}</span></code></pre>"},
{
    "exerciseName":"Function",
    "exerciseId":"IDBAI_3",
    "exerciseNumber":"<p>The <code><strong>function*</strong></code> declaration (<code>function</code> keyword followed by an asterisk) defines a<em>generator function</em>, which returns a <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator’ title=‘The Generator object is returned by a generator function and it conforms to both the iterator and the Iterable protocol.’><code>Generator</code></a> object.</p> <p>You can also define generator functions using the <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction’ title=‘The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.’><code>GeneratorFunction</code></a> constructor and a <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*’ title=‘The function* keyword can be used to define a generator function inside an expression.’><code>function* expression</code></a>.</p> <h2>Syntax</h2><pre>function* <em>name</em>([<em>param</em>[, <em>param</em>[, ... <em>param</em>]]]) { <em>statements</em> }</pre> <dl> <dt><code>name</code></dt> <dd>The function name.</dd> </dl> <dl> <dt><code>param</code></dt> <dd>The name of an argument to be passed to the function. A function can have up to 255 arguments.</dd> </dl> <dl> <dt><code>statements</code></dt> <dd>The statements comprising the body of the function.</dd> </dl> <h2>Description</h2> <p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p> <p>Calling a generator function does not execute its body immediately; an <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator’>iterator</a> object for the function is returned instead. When the iterator's <code>next()</code> method is called, the generator function's body is executed until the first <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield’ title=‘The yield keyword is used to pause and resume a generator function (function* or legacy generator function).’><code>yield</code></a> expression, which specifies the value to be returned from the iterator or, with <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*’ title=‘The yield* expression is used to delegate to another generator or iterable object.’><code>yield*</code></a>, delegates to another generator function. The <code>next()</code> method returns an object with a <code>value</code> property containing the yielded value and a <code>done</code> property which indicates whether the generator has yielded its last value.</p> <h2>Examples</h2> <h3>Simple example</h3><pre><code>function* idMaker(){ var index = 0; while(index < 3) yield index++; } var gen = idMaker(); console.log(gen.next().value); <span spellcheck=‘true’>// 0</span> console.log(gen.next().value); <span spellcheck=‘true’>// 1</span> console.log(gen.next().value); <span spellcheck=‘true’>// 2</span> console.log(gen.next().value); <span spellcheck=‘true’>// undefined</span> <span spellcheck=‘true’>// ...</span></code></pre> <h3>Example with yield*</h3><pre><code>function* anotherGenerator(i) { yield i + 1; yield i + 2; yield i + 3; } function* generator(i){ yield i; yield* anotherGenerator(i); yield i + 10; } var gen = generator(10); console.log(gen.next().value); <span spellcheck=‘true’>// 10</span> console.log(gen.next().value); <span spellcheck=‘true’>// 11</span> console.log(gen.next().value); <span spellcheck=‘true’>// 12</span> console.log(gen.next().value); <span spellcheck=‘true’>// 13</span> console.log(gen.next().value); <span spellcheck=‘true’>// 20</span></code></pre> <h3>Generators are not constructable</h3><pre><code>function* f() {} var obj = new f; <span spellcheck=‘true’>// throws ‘TypeError: f is not a constructor’</span></code></pre>SyntaxError: Unexpected token &Author: Olivier Cuenot"
},
{
"exerciseName":"Return",
"exerciseId":"IDBAI_4",
"exerciseNumber":"<p>The <strong><code>return</code> statement</strong> ends function execution and specifies a value to be returned to the function caller.</p> <h2>Syntax</h2><pre>return [[expression]]; </pre> <dl> <dt><code>expression</code></dt> <dd>The expression to return. If omitted, <code>undefined</code> is returned instead.</dd> </dl> <h2>Description</h2> <p>When a <code>return</code> statement is called in a function, the execution of this function is stopped. If specified, a given value is returned to the function caller. If the expression is omitted, <code>undefined</code> is returned instead. The following return statements all break the function execution:</p><pre><code>return; return true; return false; return x; return x + y / 3;</code></pre> <h3>Automatic Semicolon Insertion</h3> <p>The <code>return</code> statement is affected by <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion’>automatic semicolon insertion (ASI)</a>. No line terminator is allowed between the <code>return</code> keyword and the expression.</p><pre><code>return a + b;</code></pre> <p>is transformed by ASI into:</p><pre><code>return; a + b;</code></pre> <p>The console will warn ‘unreachable code after return statement’.</p> <p>Starting with Gecko 40 (Firefox 40 / Thunderbird 40 / SeaMonkey 2.37), a warning is shown in the console if unreachable code is found after a return statement.</p> <h2>Examples</h2> <h3>return</h3> <p>The following function returns the square of its argument, <code>x</code>, where <code>x</code> is a number.</p><pre><code>function square(x) { return x * x; }</code></pre> <h3>Interrupt a function</h3> <p>A function immediately stops at the point where <code>return</code> is called.</p><pre><code>function counter() { for (var count = 1; ; count++) {  <span spellcheck=‘true’>// infinite loop</span> console.log(count + ‘A’); <span spellcheck=‘true’>// until 5</span> if (count === 5) {           return; } console.log(count + ‘B’);  <span spellcheck=‘true’>// until 4</span> } console.log(count + ‘C’);  <span spellcheck=‘true’>// never appears</span> } counter(); <span spellcheck=‘true’>// Output:</span> <span spellcheck=‘true’>// 1A</span> <span spellcheck=‘true’>// 1B</span> <span spellcheck=‘true’>// 2A</span> <span spellcheck=‘true’>// 2B</span> <span spellcheck=‘true’>// 3A</span> <span spellcheck=‘true’>// 3B</span> <span spellcheck=‘true’>// 4A</span> <span spellcheck=‘true’>// 4B</span> <span spellcheck=‘true’>// 5A</span></code></pre> <h3>Returning a function</h3> <p>See also the article about <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures’>Closures</a>.</p><pre><code>function magic(x) { return function calc(x) { return x * 42 }; } var answer = magic(); answer(1337); <span spellcheck=‘true’>// 56154</span></code></pre>"
},
{
    "exerciseName":"Assign",
    "exerciseId":"IDBAI_5",
    "exerciseNumber":"<prticle id=‘wikiArticle’> <div><section id=‘Quick_Links’ class=‘Quick_links’><!-- --></section></div> <p>An <strong>assignment operator</strong> assigns a value to its left operand based on the value of its right operand.</p> <h2 id=‘Overview’>Overview<p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Overview’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The basic assignment operator is equal (<code>=</code>), which assigns the value of its right operand to its left operand. That is, <code>x = y</code> assigns the value of <code>y</code> to <code>x</code>. The other assignment operators are usually shorthand for standard operations, as shown in the following definitions and examples.</p> <table class=‘standard-table’> <tbody> <tr> <th>Name</th> <th>Shorthand operator</th> <th>Meaning</th> </tr> <tr> <td><p  =‘#Assignment’>Assignment</p></td> <td><code>x = y</code></td> <td><code>x = y</code></td> </tr> <tr> <td><p  =‘#Addition_assignment’>Addition assignment</p></td> <td><code>x += y</code></td> <td><code>x = x + y</code></td> </tr> <tr> <td><p  =‘#Subtraction_assignment’>Subtraction assignment</p></td> <td><code>x -= y</code></td> <td><code>x = x - y</code></td> </tr> <tr> <td><p  =‘#Multiplication_assignment’>Multiplication assignment</p></td> <td><code>x *= y</code></td> <td><code>x = x * y</code></td> </tr> <tr> <td><p  =‘#Division_assignment’>Division assignment</p></td> <td><code>x /= y</code></td> <td><code>x = x / y</code></td> </tr> <tr> <td><p  =‘#Remainder_assignment’>Remainder assignment</p></td> <td><code>x %= y</code></td> <td><code>x = x % y</code></td> </tr> <tr> <td><p  =‘#Exponentiation_assignment’>Exponentiation assignment</p></td> <td><code>x **= y</code></td> <td><code>x = x ** y</code></td> </tr> <tr> <td><p  =‘#Left_shift_assignment’>Left shift assignment</p></td> <td><code>x <<= y</code></td> <td><code>x = x << y</code></td> </tr> <tr> <td><p  =‘#Right_shift_assignment’>Right shift assignment</p></td> <td><code>x >>= y</code></td> <td><code>x = x >> y</code></td> </tr> <tr> <td><p  =‘#Unsigned_right_shift_assignment’>Unsigned right shift assignment</p></td> <td><code>x >>>= y</code></td> <td><code>x = x >>> y</code></td> </tr> <tr> <td><p  =‘#Bitwise_AND_assignment’>Bitwise AND assignment</p></td> <td><code>x &= y</code></td> <td><code>x = x & y</code></td> </tr> <tr> <td><p  =‘#Bitwise_XOR_assignment’>Bitwise XOR assignment</p></td> <td><code>x ^= y</code></td> <td><code>x = x ^ y</code></td> </tr> <tr> <td><p  =‘#Bitwise_OR_assignment’>Bitwise OR assignment</p></td> <td><code>x |= y</code></td> <td><code>x = x | y</code></td> </tr> </tbody> </table> <h2 id=‘Assignment_2’><p name=‘Assignment’>Assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>Simple assignment operator which assigns a value to a variable. The assignment operation returns the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables. See the example.</p> <h3 id=‘Syntax’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x = y </pre> <h3 id=‘Examples’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variables</span> <span class=‘token comment’ spellcheck=‘true’></br>// x = 5</span> <span class=‘token comment’ spellcheck=‘true’></br>// y = 10</span> <span class=‘token comment’ spellcheck=‘true’></br>// z = 25</span> x <span class=‘token operator’>=</span> y <span class=‘token comment’ spellcheck=‘true’></br>// x is 10</span> x <span class=‘token operator’>=</span> y <span class=‘token operator’>=</span> z <span class=‘token comment’ spellcheck=‘true’></br>// x, y and z are all 25</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Addition_assignment_2’><p name=‘Addition_assignment’>Addition assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Addition_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The addition assignment operator <strong>adds</strong> the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition’ title=‘Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).’>addition operator</p> for more details.</p> <h3 id=‘Syntax_2’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x += y <strong>Meaning:</strong> x = x + y </pre> <h3 id=‘Examples_2’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variables</span> <span class=‘token comment’ spellcheck=‘true’></br>// foo = ‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// bar = 5</span> <span class=‘token comment’ spellcheck=‘true’></br>// baz = true</span> <span class=‘token comment’ spellcheck=‘true’></br>// Number + Number -> addition</span> bar <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span> <span class=‘token comment’ spellcheck=‘true’></br>// 7</span> <span class=‘token comment’ spellcheck=‘true’></br>// Boolean + Number -> addition</span> baz <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token number’>1</span> <span class=‘token comment’ spellcheck=‘true’></br>// 2</span> <span class=‘token comment’ spellcheck=‘true’></br>// Boolean + Boolean -> addition</span> baz <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token keyword’>false</span> <span class=‘token comment’ spellcheck=‘true’></br>// 1</span> <span class=‘token comment’ spellcheck=‘true’></br>// Number + String -> concatenation</span> bar <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token string’>‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// ‘5foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// String + Boolean -> concatenation</span> foo <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token keyword’>false</span> <span class=‘token comment’ spellcheck=‘true’></br>// ‘foofalse’</span> <span class=‘token comment’ spellcheck=‘true’></br>// String + String -> concatenation</span> foo <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token string’>‘bar’</span> <span class=‘token comment’ spellcheck=‘true’></br>// ‘foobar’</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Subtraction_assignment_2’><p name=‘Subtraction_assignment’>Subtraction assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Subtraction_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The subtraction assignment operator <strong>subtracts</strong> the value of the right operand from a variable and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction’ title=‘Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).’>subtraction operator</p> for more details.</p> <h4 id=‘Syntax_3’>Syntax</h4> <pre class=‘syntaxbox’><strong>Operator:</strong> x -= y <strong>Meaning:</strong> x = x - y </pre> <h4 id=‘Examples_3’>Examples</h4> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variable</span> <span class=‘token comment’ spellcheck=‘true’></br>// bar = 5</span> bar <span class=‘token operator’>-</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span> <span class=‘token comment’ spellcheck=‘true’></br>// 3</span> bar <span class=‘token operator’>-</span><span class=‘token operator’>=</span> <span class=‘token string’>‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// NaN</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Multiplication_assignment_2’><p name=‘Multiplication_assignment’>Multiplication assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Multiplication_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The multiplication assignment operator <strong>multiplies</strong> a variable by the value of the right operand and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication’ title=‘Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).’>multiplication operator</p> for more details.</p> <h3 id=‘Syntax_4’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x *= y <strong>Meaning:</strong> x = x * y </pre> <h3 id=‘Examples_4’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variable</span> <span class=‘token comment’ spellcheck=‘true’></br>// bar = 5</span> bar <span class=‘token operator’>*</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span> <span class=‘token comment’ spellcheck=‘true’></br>// 10</span> bar <span class=‘token operator’>*</span><span class=‘token operator’>=</span> <span class=‘token string’>‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// NaN</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Division_assignment_2’><p name=‘Division_assignment’>Division assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Division_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The division assignment operator <strong>divides</strong> a variable by the value of the right operand and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division’ title=‘Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).’>division operator</p> for more details.</p> <h3 id=‘Syntax_5’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x /= y <strong>Meaning:</strong> x = x / y </pre> <h3 id=‘Examples_5’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variable</span> <span class=‘token comment’ spellcheck=‘true’></br>// bar = 5</span> bar <span class=‘token operator’>/</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span> <span class=‘token comment’ spellcheck=‘true’></br>// 2.5</span> bar <span class=‘token operator’>/</span><span class=‘token operator’>=</span> <span class=‘token string’>‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// NaN</span> bar <span class=‘token operator’>/</span><span class=‘token operator’>=</span> <span class=‘token number’>0</span> <span class=‘token comment’ spellcheck=‘true’></br>// Infinity</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Remainder_assignment_2’><p name=‘Remainder_assignment’>Remainder assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Remainder_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The remainder assignment operator <strong>divides</strong> a variable by the value of the right operand and assigns the <strong>remainder</strong> to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder’ title=‘Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).’>remainder operator</p> for more details.</p> <h3 id=‘Syntax_6’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x %= y <strong>Meaning:</strong> x = x % y </pre> <h3 id=‘Examples_6’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variable</span> <span class=‘token comment’ spellcheck=‘true’></br>// bar = 5</span> bar <span class=‘token operator’>%</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span> <span class=‘token comment’ spellcheck=‘true’></br>// 1</span> bar <span class=‘token operator’>%</span><span class=‘token operator’>=</span> <span class=‘token string’>‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// NaN</span> bar <span class=‘token operator’>%</span><span class=‘token operator’>=</span> <span class=‘token number’>0</span> <span class=‘token comment’ spellcheck=‘true’></br>// NaN</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Exponentiation_assignment_2’><p name=‘Exponentiation_assignment’ id=‘Exponentiation_assignment’>Exponentiation assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Exponentiation_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p></p><div class=‘overheadIndicator’ style=‘background: #9CF49C;’> <p><strong>This is an experimental technology, part of the ECMAScript 2016 (ES7) proposal.</strong><br>Because this technology's specification has not stabilized, check the <p  =‘#Browser_compatibility’>compatibility table</p> for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future version of browsers as the spec changes.</p> </div><p></p> <p>The exponentiation assignment operator returns the result of raising first operand to the <strong>power</strong> second operand. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Exponentiation’ title=‘Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).’>exponentiation operator</p> for more details.</p> <h3 id=‘Syntax_7’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x **= y <strong>Meaning:</strong> x = x ** y </pre> <h3 id=‘Examples_7’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token comment’ spellcheck=‘true’></br>// Assuming the following variable</span> <span class=‘token comment’ spellcheck=‘true’></br>// bar = 5</span> bar <span class=‘token operator’>*</span><span class=‘token operator’>*</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span> <span class=‘token comment’ spellcheck=‘true’></br>// 25</span> bar <span class=‘token operator’>*</span><span class=‘token operator’>*</span><span class=‘token operator’>=</span> <span class=‘token string’>‘foo’</span> <span class=‘token comment’ spellcheck=‘true’></br>// NaN</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Left_shift_assignment_2’><p name=‘Left_shift_assignment’>Left shift assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Left_shift_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The left shift assignment operator moves the specified amount of bits to the left and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift’ title=‘Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.’>left shift operator</p> for more details.</p> <h3 id=‘Syntax_8’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x <<= y <strong>Meaning:</strong> x = x << y </pre> <h3 id=‘Examples_8’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token number’>5</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// (00000000000000000000000000000101)</span> bar <span class=‘token operator’><</span><span class=‘token operator’><=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 20 (00000000000000000000000000010100)</span><span class=‘line-numbers-rows’><span></span><span></span></span></code></pre> <h2 id=‘Right_shift_assignment_2’><p name=‘Right_shift_assignment’>Right shift assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Right_shift_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The right shift assignment operator moves the specified amount of bits to the right and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift’ title=‘Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.’>right shift operator</p> for more details.</p> <h3 id=‘Syntax_9’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x >>= y <strong>Meaning:</strong> x = x >> y </pre> <h3 id=‘Examples_9’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token number’>5</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// (00000000000000000000000000000101)</span> bar <span class=‘token operator’>></span><span class=‘token operator’>>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 1 (00000000000000000000000000000001)</span> <span class=‘token keyword’>var</span> bar <span class=‘token operator’>-</span><span class=‘token number’>5</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// (-00000000000000000000000000000101)</span> bar <span class=‘token operator’>></span><span class=‘token operator’>>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// -2 (-00000000000000000000000000000010)</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Unsigned_right_shift_assignment_2’><p name=‘Unsigned_right_shift_assignment’>Unsigned right shift assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Unsigned_right_shift_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The unsigned right shift assignment operator moves the specified amount of bits to the right and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift’ title=‘Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.’> unsigned right shift operator</p> for more details.</p> <h3 id=‘Syntax_10’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x >>>= y <strong>Meaning:</strong> x = x >>> y </pre> <h3 id=‘Examples_10’>Examples</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token number’>5</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// (00000000000000000000000000000101)</span> bar <span class=‘token operator’>></span><span class=‘token operator’>></span><span class=‘token operator’>>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 1 (00000000000000000000000000000001)</span> <span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token operator’>-</span><span class=‘token number’>5</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// (-00000000000000000000000000000101)</span> bar <span class=‘token operator’>></span><span class=‘token operator’>></span><span class=‘token operator’>>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 1073741822 (00111111111111111111111111111110)</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Bitwise_AND_assignment_2’><p name=‘Bitwise_AND_assignment’>Bitwise AND assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Bitwise_AND_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The bitwise AND assignment operator uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND’ title=‘Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.’>bitwise AND operator</p> for more details.</p> <h3 id=‘Syntax_11’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x &= y <strong>Meaning:</strong> x = x & y </pre> <h3 id=‘Example’>Example</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token number’>5</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 5: 00000000000000000000000000000101</span> <span class=‘token comment’ spellcheck=‘true’></br>// 2: 00000000000000000000000000000010</span> bar <span class=‘token operator’>&</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 0</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Bitwise_XOR_assignment_2’><p name=‘Bitwise_XOR_assignment’>Bitwise XOR assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Bitwise_XOR_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The bitwise XOR assignment operator uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR’ title=‘Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.’>bitwise XOR operator</p> for more details.</p> <h3 id=‘Syntax_12’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x ^= y <strong>Meaning:</strong> x = x ^ y </pre> <h3 id=‘Example_2’>Example</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token number’>5</span><span class=‘token punctuation’>;</span> bar <span class=‘token operator’>^</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 7</span> <span class=‘token comment’ spellcheck=‘true’></br>// 5: 00000000000000000000000000000101</span> <span class=‘token comment’ spellcheck=‘true’></br>// 2: 00000000000000000000000000000010</span> <span class=‘token comment’ spellcheck=‘true’></br>// -----------------------------------</span> <span class=‘token comment’ spellcheck=‘true’></br>// 7: 00000000000000000000000000000111</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Bitwise_OR_assignment_2’><p name=‘Bitwise_OR_assignment’>Bitwise OR assignment</p><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Bitwise_OR_assignment_2’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p>The bitwise OR assignment operator uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable. See the <p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR’ title=‘Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.’>bitwise OR operator</p> for more details.</p> <h3 id=‘Syntax_13’>Syntax</h3> <pre class=‘syntaxbox’><strong>Operator:</strong> x |= y <strong>Meaning:</strong> x = x | y </pre> <h3 id=‘Example_3’>Example</h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> bar <span class=‘token operator’>=</span> <span class=‘token number’>5</span><span class=‘token punctuation’>;</span> bar <span class=‘token operator’>|</span><span class=‘token operator’>=</span> <span class=‘token number’>2</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’></br>// 7</span> <span class=‘token comment’ spellcheck=‘true’></br>// 5: 00000000000000000000000000000101</span> <span class=‘token comment’ spellcheck=‘true’></br>// 2: 00000000000000000000000000000010</span> <span class=‘token comment’ spellcheck=‘true’></br>// -----------------------------------</span> <span class=‘token comment’ spellcheck=‘true’></br>// 7: 00000000000000000000000000000111</span><span class=‘line-numbers-rows’><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h2 id=‘Examples_11’>Examples<p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Examples_11’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <h3 id=‘Left_operand_with_another_assignment_operator’>Left operand with another assignment operator</h3> <p>In unusual situations, the assignment operator (e.g.<code> x += y</code>) is not identical to the meaning expression (here <code>x = x + y</code>). When the left operand of an assignment operator itself contains an assignment operator, the left operand is evaluated only once. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’>a<span class=‘token punctuation’>[</span>i<span class=‘token operator’>++</span><span class=‘token punctuation’>]</span> <span class=‘token operator’>+</span><span class=‘token operator’>=</span> <span class=‘token number’>5</span> <span class=‘token comment’ spellcheck=‘true’></br>// i is evaluated only once</span> a<span class=‘token punctuation’>[</span>i<span class=‘token operator’>++</span><span class=‘token punctuation’>]</span> <span class=‘token operator’>=</span> a<span class=‘token punctuation’>[</span>i<span class=‘token operator’>++</span><span class=‘token punctuation’>]</span> <span class=‘token operator’>+</span> <span class=‘token number’>5</span> <span class=‘token comment’ spellcheck=‘true’></br>// i is evaluated twice</span><span class=‘line-numbers-rows’><span></span><span></span></span></code></pre> <h2 id=‘Specifications’>Specifications<p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Specifications’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <table class=‘standard-table’> <tbody> <tr> <th scope=‘col’>Specification</th> <th scope=‘col’>Status</th> <th scope=‘col’>Comment</th> </tr> <tr> <td><p  =‘https:</br>//tc39.github.io/ecma262/#sec-assignment-operators’ class=‘external external-icon’ lang=‘en’  lang=‘en’>ECMAScript 2017 Draft (ECMA-262)<br><small lang=‘en-US’>The definition of 'Assignment operators' in that specification.</small></p></td> <td><span class=‘spec-Draft’>Draft</span></td> <td> </td> </tr> <tr> <td><p  =‘http:</br>//www.ecma-international.org/ecma-262/6.0/#sec-assignment-operators’ class=‘external external-icon’ lang=‘en’  lang=‘en’>ECMAScript 2015 (6th Edition, ECMA-262)<br><small lang=‘en-US’>The definition of 'Assignment operators' in that specification.</small></p></td> <td><span class=‘spec-Standard’>Standard</span></td> <td> </td> </tr> <tr> <td><p  =‘http:</br>//www.ecma-international.org/ecma-262/5.1/#sec-11.13’ class=‘external external-icon’ lang=‘en’  lang=‘en’>ECMAScript 5.1 (ECMA-262)<br><small lang=‘en-US’>The definition of 'Assignment operators' in that specification.</small></p></td> <td><span class=‘spec-Standard’>Standard</span></td> <td> </td> </tr> <tr> <td><p  =‘http:</br>//www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%201st%20edition,%20June%201997.pdf#sec-11.13’ class=‘external external-icon’ lang=‘en’  lang=‘en’>ECMAScript 1st Edition (ECMA-262)<br><small lang=‘en-US’>The definition of 'Assignment operators' in that specification.</small></p></td> <td><span class=‘spec-Standard’>Standard</span></td> <td>Initial definition.</td> </tr> </tbody> </table> <h2 id=‘Browser_compatibility’>Browser compatibility<p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#Browser_compatibility’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <p></p><div class=‘htab’> <p name=‘AutoCompatibilityTable’ id=‘AutoCompatibilityTable’></p> <ul> <li class=‘selected’><p>Desktop</p></li> <li><p>Mobile</p></li> </ul> <div id=‘compat-desktop’ style=‘display: block;’> <table class=‘compat-table’> <tbody> <tr> <th>Feature</th> <th>Chrome</th> <th>Firefox (Gecko)</th> <th>Internet Explorer</th> <th>Opera</th> <th>Safari</th> </tr> <tr> <td>Basic support</td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> </tr> </tbody> </table> </div><div id=‘compat-mobile’ style=‘display: none;’> <table class=‘compat-table’> <tbody> <tr> <th>Feature</th> <th>Android</th> <th>Chrome for Android</th> <th>Firefox Mobile (Gecko)</th> <th>IE Mobile</th> <th>Opera Mobile</th> <th>Safari Mobile</th> </tr> <tr> <td>Basic support</td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> <td><span title=‘Please update this with the earliest version of support.’ style=‘color: #888;’>(Yes)</span></td> </tr> </tbody> </table> </div></div><p></p> <h2 id=‘See_also’>See also<p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators$edit#See_also’ class=‘button section-edit only-icon’><i aria-hidden=‘true’ class=‘icon-pencil’></i><span>Edit</span></p></h2> <ul> <li><p  =‘/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators’>Arithmetic operators</p></li> </ul> </article>"
},
{
"exerciseName":"Data-Type",
"exerciseId":"IDBAI_6",
"exerciseNumber":"<h2>Primitive Data Types:</h2> <p>There are eight primitive data types supported by Java. Primitive data types are predefined by the language and named by a keyword. Let us now look into detail about the eight primitive data types.</p> <h2>byte:</h2> <ul class=‘list’> <li><p>Byte data type is an 8-bit signed two's complement integer.</p></li> <li><p>Minimum value is -128 (-2^7)</p></li> <li><p>Maximum value is 127 (inclusive)(2^7 -1)</p></li> <li><p>Default value is 0</p></li> <li><p>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an int.</p></li> <li><p>Example: byte a = 100 , byte b = -50</p></li> </ul> <h2>short:</h2> <ul class=‘list’> <li><p>Short data type is a 16-bit signed two's complement integer. </p></li> <li><p>Minimum value is -32,768 (-2^15)</p></li> <li><p>Maximum value is 32,767 (inclusive) (2^15 -1)</p></li> <li><p>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an int</p></li> <li><p>Default value is 0.</p></li> <li><p>Example: short s = 10000, short r = -20000</p></li> </ul> <h2>int:</h2> <ul class=‘list’> <li><p>Int data type is a 32-bit signed two's complement integer.</p></li> <li><p>Minimum value is - 2,147,483,648.(-2^31)</p></li> <li><p>Maximum value is 2,147,483,647(inclusive).(2^31 -1)</p></li> <li><p>Int is generally used as the default data type for integral values unless there is a concern about memory.</p></li> <li><p>The default value is 0.</p></li> <li><p>Example: int a = 100000, int b = -200000</p></li> </ul> <h2>long:</h2> <ul class=‘list’> <li><p>Long data type is a 64-bit signed two's complement integer. </p></li> <li><p>Minimum value is -9,223,372,036,854,775,808.(-2^63)</p></li> <li><p>Maximum value is 9,223,372,036,854,775,807 (inclusive). (2^63 -1)</p></li> <li><p>This type is used when a wider range than int is needed.</p></li> <li><p>Default value is 0L.</p></li> <li><p>Example: long a = 100000L, long b = -200000L</p></li> </ul> <h2>float:</h2> <ul class=‘list’> <li><p>Float data type is a single-precision 32-bit IEEE 754 floating point. </p></li> <li><p>Float is mainly used to save memory in large arrays of floating point numbers.</p></li> <li><p>Default value is 0.0f.</p></li> <li><p>Float data type is never used for precise values such as currency. </p></li> <li><p>Example: float f1 = 234.5f</p></li> </ul> <h2>double:</h2> <ul class=‘list’> <li><p>double data type is a double-precision 64-bit IEEE 754 floating point.</p></li> <li><p>This data type is generally used as the default data type for decimal values, generally the default choice. </p></li> <li><p>Double data type should never be used for precise values such as currency.</p></li> <li><p>Default value is 0.0d.</p></li> <li><p>Example: double d1 = 123.4</p></li> </ul> <h2>boolean:</h2> <ul class=‘list’> <li><p>boolean data type represents one bit of information.</p></li> <li><p>There are only two possible values: true and false.</p></li> <li><p>This data type is used for simple flags that track true/false conditions.</p></li> <li><p>Default value is false.</p></li> <li><p>Example: boolean one = true</p></li> </ul> <h2>char:</h2> <ul class=‘list’> <li><p>char data type is a single 16-bit Unicode character. </p></li> <li><p>Minimum value is '\u0000' (or 0).</p></li> <li><p>Maximum value is '\uffff' (or 65,535 inclusive).</p></li> <li><p>Char data type is used to store any character.</p></li> <li><p>Example: char letterA ='A'</p></li> </ul>"
},
{
    "exerciseName":"Switch - case",
    "exerciseId":"IDBAI_7",
    "exerciseNumber":"NOI_DUNG_BAI_7"
},
{
"exerciseName":"TEN_BAI_8",
"exerciseId":"IDBAI_8",
"exerciseNumber":"NOI_DUNG_BAI_8"
},
{
    "exerciseName":"TEN_BAI_9",
    "exerciseId":"IDBAI_9",
    "exerciseNumber":"NOI_DUNG_BAI_9"
},
{
"exerciseName":"TEN_BAI_10",
"exerciseId":"IDBAI_10",
"exerciseNumber":"NOI_DUNG_BAI_10"
},
{
    "exerciseName":"TEN_BAI_11",
    "exerciseId":"IDBAI_11",
    "exerciseNumber":"NOI_DUNG_BAI_11"
},
{
"exerciseName":"TEN_BAI_12",
"exerciseId":"IDBAI_12",
"exerciseNumber":"NOI_DUNG_BAI_12"
},
{
    "exerciseName":"TEN_BAI_13",
    "exerciseId":"IDBAI_13",
    "exerciseNumber":"NOI_DUNG_BAI_13"
},
{
"exerciseName":"TEN_BAI_14",
"exerciseId":"IDBAI_14",
"exerciseNumber":"NOI_DUNG_BAI_14"
}
]