[
{
    "exerciseName":"For",
    "exerciseId":"IDBAI_1",
    "exerciseNumber": "<!-- ####### YAY, I AM THE SOURCE EDITOR! #########--> <p>The <strong>for statement</strong> creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement or a set of statements executed in the loop.</p> <h2 id=‘Syntax’>Syntax</h2> <pre class=‘syntaxbox’>for ([<em>initialization</em>]; [<em>condition</em>]; [<em>final-expression</em>]) <em>statement</em> </pre> <dl> <dt><code>initialization</code></dt> <dd>An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the<code>var</code> keyword. These variables are not local to the loop, i.e. they are in the same scope the<code>for</code> loop is in. The result of this expression is discarded.</dd> <dt><code>condition</code></dt> <dd>An expression to be evaluated before each loop iteration. If this expression evaluates to true,<code>statement</code> is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the <code>for</code> construct.</dd> <dt><code>final-expression</code></dt> <dd>An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of <code>condition</code>. Generally used to update or increment the counter variable.</dd> <dt><code>statement</code></dt> <dd>A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a <a title=‘JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/block’>block</a> statement (<code>{ ... }</code>) to group those statements. To execute no statement within the loop, use an <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement (<code>;</code>).</dd> </dl> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_for’>Using <code>for</code></h3> <p>The following <code>for</code> statement starts by declaring the variable <code>i</code> and initializing it to <code>0</code>. It checks that <code>i</code> is less than nine, performs the two succeeding statements, and increments <code>i</code> by 1 after each pass through the loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Optional_for_expressions’>Optional <code>for</code> expressions</h3> <p>All three expressions in the head of the <code>for</code> loop are optional.</p> <p>For example, in the <em>initialization</em> block it is not required to initialize variables:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span> i <span class=‘token operator’><</span> <span class=‘token number’>9</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>Like the <em>initialization</em> block, the <em>condition</em> block is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> <span class=‘token comment’ spellcheck=‘true’>// more statements</span> <span class=‘token punctuation’>}</span></code></pre> <p>You can also omit all three blocks. Again, make sure to use a <code><a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break’>break</a></code> statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point.</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> i <span class=‘token operator’>=</span> <span class=‘token number’>0</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>for</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>;</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>i <span class=‘token operator’>></span> <span class=‘token number’>3</span><span class=‘token punctuation’>)</span> <span class=‘token keyword’>break</span><span class=‘token punctuation’>;</span> console<span class=‘token punctuation’>.</span><span class=‘token function’>log</span><span class=‘token punctuation’>(</span>i<span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> i<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre>"},
{
"exerciseName":"If...else",
"exerciseId":"IDBAI_2",
"exerciseNumber":"<!-- ####### YAY, I AM THE SOURCE EDITOR! #########--> <p>The <strong>if statement</strong> executes a statement if a specified condition is true. If the condition is false, another statement can be executed.</p> <h2 id=‘Syntax’>Syntax</h2> <pre class=‘syntaxbox’>if (<em>condition</em>) <em>statement1</em> [else <em>statement2</em>] </pre> <dl> <dt><code>condition</code></dt> <dd>An <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions’>expression</a> that evaluates to true or false.</dd> </dl> <dl> <dt><code>statement1</code></dt> <dd>Statement that is executed if <code>condition</code> evaluates to true. Can be any statement, including further nested <code>if</code> statements. To execute multiple statements, use a <a title=‘en/JavaScript/Reference/Statements/block’ href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block’>block</a>statement ({ ... }) to group those statements, to execute no statements, use an<a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty’>empty</a> statement.</dd> </dl> <dl> <dt><code>statement2</code></dt> <dd>Statement that is executed if <code>condition</code> evaluates to false and the <code>else</code> clause exists. Can be any statement, including block statements and further nested <code>if</code>statements.</dd> </dl> <h2 id=‘Description’>Description</h2> <p>Multiple <code>if...else</code> statements can be nested to create an <code>else if</code> clause. Note that there is no <code>elseif</code> (in one word) keyword in JavaScript.</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition1) statement1 else if (condition2) statement2 else if (condition3) statement3 ... else statementN</code></pre> <p>To see how this works, this is how it would look like if the nesting were properly indented:</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition1) statement1 else if (condition2) statement2 else if (condition3) ...</code></pre> <p>To execute multiple statements within a clause, use a block statement (<code>{ ... }</code>) to group those statements. In general, it is a good practice to always use block statements, especially in code involving nested <code>if</code> statements:</p> <pre class=‘eval line-numbers language-html’><code class=‘ language-html’>if (condition) { statements1 } else { statements2 }</code></pre> <p>Do not confuse the primitive boolean values <code>true</code> and <code>false</code> with the true and false values of the <a title=‘en/JavaScript/Reference/Global_Objects/Boolean’ href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean’>Boolean</a> object. Any value that is not <code>undefined</code>, <code>null</code>, <code>0</code>, <code>NaN</code>, or the empty string (<code>‘‘</code>), and any object, including a Boolean object whose value is false, evaluates to true when passed to a conditional statement. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>var</span> b <span class=‘token operator’>=</span> <span class=‘token keyword’>new</span> <span class=‘token class-name’>Boolean</span><span class=‘token punctuation’>(</span><span class=‘token keyword’>false</span><span class=‘token punctuation’>)</span><span class=‘token punctuation’>;</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>b<span class=‘token punctuation’>)</span> <span class=‘token comment’ spellcheck=‘true’>// this condition evaluates to true</span></code></pre> <h2 id=‘Examples’>Examples</h2> <h3 id=‘Using_if...else’>Using <code>if...else</code></h3> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>cipher_char <span class=‘token operator’>===</span> from_char<span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> result <span class=‘token operator’>=</span> result <span class=‘token operator’>+</span> to_char<span class=‘token punctuation’>;</span> x<span class=‘token operator’>++</span><span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token punctuation’>{</span> result <span class=‘token operator’>=</span> result <span class=‘token operator’>+</span> clear_char<span class=‘token punctuation’>;</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Using_else_if’>Using <code>else if</code></h3> <p>Note that there is no <code>elseif</code> syntax in JavaScript. However, you can write it with a space between <code>else</code> and <code>if</code>:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>></span> <span class=‘token number’>5</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>></span> <span class=‘token number’>50</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span> <span class=‘token keyword’>else</span> <span class=‘token punctuation’>{</span> <span class=‘token punctuation’>}</span></code></pre> <h3 id=‘Assignment_within_the_conditional_expression’>Assignment within the conditional expression</h3> <p>It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span>x <span class=‘token operator’>=</span> y<span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token comment’ spellcheck=‘true’>/* do the right thing */</span> <span class=‘token punctuation’>}</span></code></pre> <p>If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:</p> <pre class=‘brush: js line-numbers language-js’><code class=‘ language-js’><span class=‘token keyword’>if</span> <span class=‘token punctuation’>(</span><span class=‘token punctuation’>(</span>x <span class=‘token operator’>=</span> y<span class=‘token punctuation’>)</span><span class=‘token punctuation’>)</span> <span class=‘token punctuation’>{</span> <span class=‘token comment’ spellcheck=‘true’>/* do the right thing */</span> <span class=‘token punctuation’>}</span></code></pre>"},
{
    "exerciseName":"Function",
    "exerciseId":"IDBAI_3",
    "exerciseNumber":"<p>The <code><strong>function*</strong></code> declaration (<code>function</code> keyword followed by an asterisk) defines a<em>generator function</em>, which returns a <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator’ title=‘The Generator object is returned by a generator function and it conforms to both the iterator and the Iterable protocol.’><code>Generator</code></a> object.</p> <p>You can also define generator functions using the <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction’ title=‘The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.’><code>GeneratorFunction</code></a> constructor and a <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*’ title=‘The function* keyword can be used to define a generator function inside an expression.’><code>function* expression</code></a>.</p> <h2>Syntax</h2><pre>function* <em>name</em>([<em>param</em>[, <em>param</em>[, ... <em>param</em>]]]) { <em>statements</em> }</pre> <dl> <dt><code>name</code></dt> <dd>The function name.</dd> </dl> <dl> <dt><code>param</code></dt> <dd>The name of an argument to be passed to the function. A function can have up to 255 arguments.</dd> </dl> <dl> <dt><code>statements</code></dt> <dd>The statements comprising the body of the function.</dd> </dl> <h2>Description</h2> <p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p> <p>Calling a generator function does not execute its body immediately; an <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator’>iterator</a> object for the function is returned instead. When the iterator's <code>next()</code> method is called, the generator function's body is executed until the first <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield’ title=‘The yield keyword is used to pause and resume a generator function (function* or legacy generator function).’><code>yield</code></a> expression, which specifies the value to be returned from the iterator or, with <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*’ title=‘The yield* expression is used to delegate to another generator or iterable object.’><code>yield*</code></a>, delegates to another generator function. The <code>next()</code> method returns an object with a <code>value</code> property containing the yielded value and a <code>done</code> property which indicates whether the generator has yielded its last value.</p> <h2>Examples</h2> <h3>Simple example</h3><pre><code>function* idMaker(){ var index = 0; while(index < 3) yield index++; } var gen = idMaker(); console.log(gen.next().value); <span spellcheck=‘true’>// 0</span> console.log(gen.next().value); <span spellcheck=‘true’>// 1</span> console.log(gen.next().value); <span spellcheck=‘true’>// 2</span> console.log(gen.next().value); <span spellcheck=‘true’>// undefined</span> <span spellcheck=‘true’>// ...</span></code></pre> <h3>Example with yield*</h3><pre><code>function* anotherGenerator(i) { yield i + 1; yield i + 2; yield i + 3; } function* generator(i){ yield i; yield* anotherGenerator(i); yield i + 10; } var gen = generator(10); console.log(gen.next().value); <span spellcheck=‘true’>// 10</span> console.log(gen.next().value); <span spellcheck=‘true’>// 11</span> console.log(gen.next().value); <span spellcheck=‘true’>// 12</span> console.log(gen.next().value); <span spellcheck=‘true’>// 13</span> console.log(gen.next().value); <span spellcheck=‘true’>// 20</span></code></pre> <h3>Generators are not constructable</h3><pre><code>function* f() {} var obj = new f; <span spellcheck=‘true’>// throws ‘TypeError: f is not a constructor’</span></code></pre>SyntaxError: Unexpected token &Author: Olivier Cuenot"
},
{
"exerciseName":"Return",
"exerciseId":"IDBAI_4",
"exerciseNumber":"<p>The <strong><code>return</code> statement</strong> ends function execution and specifies a value to be returned to the function caller.</p> <h2>Syntax</h2><pre>return [[expression]]; </pre> <dl> <dt><code>expression</code></dt> <dd>The expression to return. If omitted, <code>undefined</code> is returned instead.</dd> </dl> <h2>Description</h2> <p>When a <code>return</code> statement is called in a function, the execution of this function is stopped. If specified, a given value is returned to the function caller. If the expression is omitted, <code>undefined</code> is returned instead. The following return statements all break the function execution:</p><pre><code>return; return true; return false; return x; return x + y / 3;</code></pre> <h3>Automatic Semicolon Insertion</h3> <p>The <code>return</code> statement is affected by <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion’>automatic semicolon insertion (ASI)</a>. No line terminator is allowed between the <code>return</code> keyword and the expression.</p><pre><code>return a + b;</code></pre> <p>is transformed by ASI into:</p><pre><code>return; a + b;</code></pre> <p>The console will warn ‘unreachable code after return statement’.</p> <p>Starting with Gecko 40 (Firefox 40 / Thunderbird 40 / SeaMonkey 2.37), a warning is shown in the console if unreachable code is found after a return statement.</p> <h2>Examples</h2> <h3>return</h3> <p>The following function returns the square of its argument, <code>x</code>, where <code>x</code> is a number.</p><pre><code>function square(x) { return x * x; }</code></pre> <h3>Interrupt a function</h3> <p>A function immediately stops at the point where <code>return</code> is called.</p><pre><code>function counter() { for (var count = 1; ; count++) {  <span spellcheck=‘true’>// infinite loop</span> console.log(count + ‘A’); <span spellcheck=‘true’>// until 5</span> if (count === 5) {           return; } console.log(count + ‘B’);  <span spellcheck=‘true’>// until 4</span> } console.log(count + ‘C’);  <span spellcheck=‘true’>// never appears</span> } counter(); <span spellcheck=‘true’>// Output:</span> <span spellcheck=‘true’>// 1A</span> <span spellcheck=‘true’>// 1B</span> <span spellcheck=‘true’>// 2A</span> <span spellcheck=‘true’>// 2B</span> <span spellcheck=‘true’>// 3A</span> <span spellcheck=‘true’>// 3B</span> <span spellcheck=‘true’>// 4A</span> <span spellcheck=‘true’>// 4B</span> <span spellcheck=‘true’>// 5A</span></code></pre> <h3>Returning a function</h3> <p>See also the article about <a href=‘https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures’>Closures</a>.</p><pre><code>function magic(x) { return function calc(x) { return x * 42 }; } var answer = magic(); answer(1337); <span spellcheck=‘true’>// 56154</span></code></pre>"
},
{
    "exerciseName":"TEN_BAI_5",
    "exerciseId":"IDBAI_5",
    "exerciseNumber":"NOI_DUNG_BAI_5"
},
{
"exerciseName":"TEN_BAI_6",
"exerciseId":"IDBAI_6",
"exerciseNumber":"NOI_DUNG_BAI_6"
},
{
    "exerciseName":"TEN_BAI_7",
    "exerciseId":"IDBAI_7",
    "exerciseNumber":"NOI_DUNG_BAI_7"
},
{
"exerciseName":"TEN_BAI_8",
"exerciseId":"IDBAI_8",
"exerciseNumber":"NOI_DUNG_BAI_8"
},
{
    "exerciseName":"TEN_BAI_9",
    "exerciseId":"IDBAI_9",
    "exerciseNumber":"NOI_DUNG_BAI_9"
},
{
"exerciseName":"TEN_BAI_10",
"exerciseId":"IDBAI_10",
"exerciseNumber":"NOI_DUNG_BAI_10"
},
{
    "exerciseName":"TEN_BAI_11",
    "exerciseId":"IDBAI_11",
    "exerciseNumber":"NOI_DUNG_BAI_11"
},
{
"exerciseName":"TEN_BAI_12",
"exerciseId":"IDBAI_12",
"exerciseNumber":"NOI_DUNG_BAI_12"
},
{
    "exerciseName":"TEN_BAI_13",
    "exerciseId":"IDBAI_13",
    "exerciseNumber":"NOI_DUNG_BAI_13"
},
{
"exerciseName":"TEN_BAI_14",
"exerciseId":"IDBAI_14",
"exerciseNumber":"NOI_DUNG_BAI_14"
}
]